<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:internal="clr-namespace:SniffCore.Input.Internal"
                    xmlns:controls="clr-namespace:SniffCore.Input">

    <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3" />
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5" />

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <internal:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />

    <Style TargetType="{x:Type controls:UpDownButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:UpDownButton}">
                    <Grid Background="Transparent">
                        <Path StrokeThickness="1" x:Name="arrow" Fill="Black" Margin="2" HorizontalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Direction" Value="Up">
                            <Setter TargetName="arrow" Property="Data" Value="M 0,4 L 4,0 L 8,4 L 0,4" />
                        </Trigger>
                        <Trigger Property="Direction" Value="Down">
                            <Setter TargetName="arrow" Property="Data" Value="M 0,0 L 4,4 L 8,0 L 0,0" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="arrow" Property="Fill"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:NumberResetButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NumberResetButton}">
                    <Border Background="{TemplateBinding Background}" Width="18">
                        <Grid Width="16">
                            <Path VerticalAlignment="Center"
                                  Data="M6.2500001,0.25 L9.75,0.25 9.75,6.25 15.75,6.25 15.75,9.75 9.75,9.75 9.75,15.75 6.2500001,15.75 6.2500001,9.75 0.25,9.75 0.25,6.25 6.2500001,6.25 z"
                                  HorizontalAlignment="Center"
                                  Stretch="Fill"
                                  Stroke="White"
                                  StrokeThickness="0.5"
                                  Height="10.5"
                                  Width="10.5"
                                  RenderTransformOrigin="0.5,0.5"
                                  Fill="{TemplateBinding Foreground}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="45" />
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFEAF6FD" Offset="0.029" />
                                        <GradientStop Color="#FFD7EFFC" Offset="0.496" />
                                        <GradientStop Color="#FFBDE6FD" Offset="0.504" />
                                        <GradientStop Color="#FFA9DAF5" Offset="0.971" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFC2E4F6" Offset="0.5" />
                                        <GradientStop Color="#FFA9D9F2" Offset="0.507" />
                                        <GradientStop Color="#FF95CEEC" Offset="0.978" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:NumberUnitLabel}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Padding" Value="0,0,2,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type controls:NumberCheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type controls:NumberBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NumberBox}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            SnapsToDevicePixels="True">
                        <DockPanel>
                            <controls:NumberResetButton x:Name="PART_ResetButton"
                                                        DockPanel.Dock="{TemplateBinding ResetButtonPosition}"
                                                        Visibility="{TemplateBinding HasResetButton, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                        AutomationProperties.AutomationId="CUI_ResetButton" />

                            <controls:NumberCheckBox x:Name="PART_CheckBox"
                                                     DockPanel.Dock="{TemplateBinding CheckBoxPosition}"
                                                     VerticalAlignment="Center"
                                                     IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                     Visibility="{TemplateBinding HasCheckBox, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                     AutomationProperties.AutomationId="CUI_CheckBox" />

                            <StackPanel DockPanel.Dock="{TemplateBinding UpDownButtonsPosition}"
                                        VerticalAlignment="Center"
                                        Visibility="Collapsed"
                                        x:Name="PART_UpDownButtons">
                                <controls:UpDownButton Direction="Up" x:Name="PART_UpButton" Focusable="False"
                                                       AutomationProperties.AutomationId="CUI_UpButton" />
                                <controls:UpDownButton Direction="Down" x:Name="PART_DownButton" Focusable="False"
                                                       AutomationProperties.AutomationId="CUI_DownButton" />
                            </StackPanel>

                            <controls:NumberUnitLabel x:Name="PART_UnitLabel"
                                                      DockPanel.Dock="{TemplateBinding UnitPosition}"
                                                      VerticalAlignment="Center"
                                                      Content="{TemplateBinding Unit}"
                                                      Visibility="{TemplateBinding Unit, Converter={StaticResource NullToVisibilityConverter}}"
                                                      AutomationProperties.AutomationId="CUI_UnitLabel" />

                            <TextBox BorderThickness="0"
                                     x:Name="PART_TextBox"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     Padding="{TemplateBinding Padding}" />

                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBoxBehavior" Value="DisableIfChecked" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_UnitLabel" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBoxBehavior" Value="EnableIfChecked" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_UnitLabel" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </MultiTrigger>
                        <Trigger Property="CanStepUp" Value="False">
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="CanStepDown" Value="False">
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="CanReset" Value="False">
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="UpDownBehavior" Value="Buttons">
                            <Setter TargetName="PART_UpDownButtons" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="UpDownBehavior" Value="ArrowsAndButtons">
                            <Setter TargetName="PART_UpDownButtons" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>